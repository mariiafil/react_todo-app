{"version":3,"sources":["components/TodoCreator/TodoCreator.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoFilter/TodoFilter.js","App.js","index.js"],"names":["uuidv1","require","TodoCreator","state","newTodo","handleChange","e","value","target","setState","handleEnter","key","trim","length","props","addTodo","title","completed","id","this","type","className","placeholder","onChange","onKeyDown","Component","TodoItem","deleteTodo","updateCompleted","checked","htmlFor","onClick","defaultProps","TodoList","todos","handleToggleAll","handleBlur","onBlur","map","todo","TodoFilter","handleShowAll","handleShowCompleted","handleShowActive","handleClearCompleted","href","name","App","filter","isChecked","checkActive","onShowAll","onShowActive","onShowCompleted","countNotCompleted","onAddTodo","prevState","onDeleteTodo","onUpdateCompleted","onClearCompleted","onHandleToggleAll","persistedTodos","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","filteredTodos","filterTodosWithQuery","handleSelect","onHandleFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.166c98be.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst uuidv1 = require('uuid/v1');\n\nexport default class TodoCreator extends Component {\n  state = {\n    newTodo: '',\n  }\n\n  handleChange = (e) => {\n    const { value } = e.target;\n\n    this.setState({\n      newTodo: value,\n    });\n  }\n\n  handleEnter = (e) => {\n    const { newTodo } = this.state;\n\n    if (e.key === 'Enter' && newTodo.trim().length > 0) {\n      this.props.addTodo({\n        title: newTodo,\n        completed: false,\n        id: uuidv1(),\n      });\n      this.setState({\n        newTodo: '',\n      });\n    }\n  }\n\n  render() {\n    const { newTodo } = this.state;\n\n    return (\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodo}\n        onChange={this.handleChange}\n        onKeyDown={this.handleEnter}\n      />\n    );\n  }\n}\n\nTodoCreator.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({\n  title,\n  id,\n  completed,\n  deleteTodo,\n  updateCompleted,\n}) => (\n  <div className=\"view\">\n    <input\n      type=\"checkbox\"\n      className=\"toggle\"\n      id={id}\n      onChange={updateCompleted}\n      checked={completed}\n    />\n    <label htmlFor={id}>{title}</label>\n    <button\n      type=\"button\"\n      className=\"destroy\"\n      onClick={deleteTodo}\n    />\n  </div>\n);\n\nTodoItem.defaultProps = {\n  completed: false,\n};\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  updateCompleted: PropTypes.func.isRequired,\n  completed: PropTypes.bool,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\n\nconst TodoList = ({\n  todos,\n  deleteTodo,\n  updateCompleted,\n  handleToggleAll,\n  checked,\n  handleBlur,\n}) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={checked}\n      onChange={handleToggleAll}\n      onBlur={handleBlur}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    <ul className=\"todo-list\">\n      {\n        todos.map(todo => (\n          <li key={todo.id}>\n            <TodoItem\n              {...todo}\n              deleteTodo={() => deleteTodo(todo.id)}\n              updateCompleted={() => updateCompleted(todo.id)}\n            />\n          </li>\n        ))\n      }\n    </ul>\n  </>\n);\n\nTodoList.defaultProps = {\n  todos: [],\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      id: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ),\n  checked: PropTypes.bool.isRequired,\n  handleBlur: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  updateCompleted: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoFilter = ({\n  handleShowAll,\n  handleShowCompleted,\n  handleShowActive,\n  handleClearCompleted,\n}) => (\n  <>\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className=\"selected\"\n          name=\"all\"\n          onClick={handleShowAll}\n        >\n        All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          name=\"false\"\n          onClick={handleShowActive}\n        >\n       Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          name=\"true\"\n          href=\"#/completed\"\n          onClick={handleShowCompleted}\n        >\n       Completed\n        </a>\n      </li>\n    </ul>\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={handleClearCompleted}\n    >\n      Clear completed\n    </button>\n  </>\n);\n\nTodoFilter.propTypes = {\n  handleShowAll: PropTypes.func.isRequired,\n  handleShowActive: PropTypes.func.isRequired,\n  handleShowCompleted: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n};\n\nexport default TodoFilter;\n","import React, { Component } from 'react';\nimport TodoCreator from './components/TodoCreator/TodoCreator';\nimport TodoList from './components/TodoList/TodoList';\nimport TodoFilter from './components/TodoFilter/TodoFilter';\n\nconst filterTodosWithQuery = (\n  todos, filter,\n) => {\n  if (filter === '') {\n    return todos;\n  }\n\n  return todos.filter(todo => todo.completed === filter);\n};\n\nexport default class App extends Component {\n  state = {\n    todos: [],\n    filter: '',\n    isChecked: false,\n    checkActive: false,\n  };\n\n  componentDidMount() {\n    const persistedTodos = localStorage.getItem('todos');\n\n    if (persistedTodos) {\n      const todos = JSON.parse(persistedTodos);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  onShowAll = () => {\n    this.setState({\n      filter: '',\n    });\n  }\n\n  onShowActive = () => {\n    this.setState({\n      filter: false,\n    });\n  }\n\n  onShowCompleted = () => {\n    this.setState({\n      filter: true,\n    });\n  }\n\n  countNotCompleted = () => {\n    const { todos } = this.state;\n\n    return todos.filter(todo => !todo.completed).length;\n  }\n\n  onAddTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  onDeleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  onUpdateCompleted = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (todo.id === id\n        ? {\n          ...todo, completed: !todo.completed,\n        } : todo)),\n    }));\n  }\n\n  onClearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  onHandleToggleAll = () => {\n    this.setState(prevState => ({\n      isChecked: !prevState.isChecked,\n      checkActive: !prevState.checkActive,\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: !prevState.isChecked,\n      })),\n    }));\n  }\n\n  onBlur = () => {\n    this.setState({\n      checkActive: false,\n    });\n  }\n\n  render() {\n    const {\n      filter,\n      todos,\n      checkActive,\n    } = this.state;\n    const filteredTodos = filterTodosWithQuery(todos, filter);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoCreator addTodo={this.onAddTodo} />\n        </header>\n\n        <section className=\"main\">\n          <TodoList\n            todos={filteredTodos}\n            deleteTodo={this.onDeleteTodo}\n            updateCompleted={this.onUpdateCompleted}\n            handleToggleAll={this.onHandleToggleAll}\n            handleBlur={this.onBlur}\n            checked={checkActive}\n          />\n        </section>\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${this.countNotCompleted()} items left`}\n            </span>\n            <TodoFilter\n              handleShowAll={this.onShowAll}\n              handleShowCompleted={this.onShowCompleted}\n              handleShowActive={this.onShowActive}\n              handleSelect={this.onHandleFilter}\n              handleClearCompleted={this.onClearCompleted}\n            />\n          </footer>\n        )}\n      </section>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}