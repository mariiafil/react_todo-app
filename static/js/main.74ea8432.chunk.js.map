{"version":3,"sources":["components/TodoCreator/TodoCreator.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoFilter/TodoFilter.js","App.js","index.js"],"names":["uuidv1","require","TodoCreator","state","newTodo","handleChange","e","value","target","setState","handleEnter","key","trim","length","props","addTodo","title","completed","id","this","type","className","placeholder","onChange","onKeyDown","Component","TodoItem","deleteTodo","updateCompleted","checked","htmlFor","onClick","TodoList","todos","handleToggleAll","map","todo","defaultProps","TodoFilter","handleSelect","handleClearCompleted","href","name","App","filter","onHandleFilter","countNotCompleted","onAddTodo","prevState","onDeleteTodo","onUpdateCompleted","onClearCompleted","onHandleToggleAll","filteredTodos","filterTodosWithQuery","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74ea8432.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst uuidv1 = require('uuid/v1');\n\nexport default class TodoCreator extends Component {\n  static propTypes = {\n    addTodo: PropTypes.func.isRequired,\n  }\n\n  state = {\n    newTodo: '',\n  }\n\n  handleChange = (e) => {\n    const { value } = e.target;\n\n    this.setState({\n      newTodo: value,\n    });\n  }\n\n  handleEnter = (e) => {\n    const { newTodo } = this.state;\n\n    if (e.key === 'Enter' && newTodo.trim().length > 0) {\n      this.props.addTodo({\n        title: newTodo,\n        completed: false,\n        id: uuidv1(),\n      });\n      this.setState({\n        newTodo: '',\n      });\n    }\n  }\n\n  render() {\n    const { newTodo } = this.state;\n\n    return (\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodo}\n        onChange={this.handleChange}\n        onKeyDown={this.handleEnter}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({\n  title,\n  id,\n  completed,\n  deleteTodo,\n  updateCompleted,\n}) => (\n  <>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={id}\n        onChange={updateCompleted}\n        checked={completed}\n      />\n      <label htmlFor={id}>{title}</label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={deleteTodo}\n      />\n    </div>\n  </>\n);\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  updateCompleted: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\n\nconst TodoList = ({\n  todos,\n  deleteTodo,\n  updateCompleted,\n  handleToggleAll,\n}) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onClick={handleToggleAll}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    <ul className=\"todo-list\">\n      {\n        todos.map(todo => (\n          <li key={todo.id}>\n            <TodoItem\n              {...todo}\n              deleteTodo={() => deleteTodo(todo.id)}\n              updateCompleted={() => updateCompleted(todo.id)}\n            />\n          </li>\n        ))\n      }\n    </ul>\n  </>\n);\n\nTodoList.defaultProps = {\n  todos: [],\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ),\n  deleteTodo: PropTypes.func.isRequired,\n  updateCompleted: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoFilter = ({\n  handleSelect,\n  handleClearCompleted,\n}) => (\n  <>\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className=\"selected\"\n          name=\"all\"\n          onClick={handleSelect}\n        >\n        All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          name=\"false\"\n          onClick={handleSelect}\n        >\n       Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          name=\"true\"\n          href=\"#/completed\"\n          onClick={handleSelect}\n        >\n       Completed\n        </a>\n      </li>\n    </ul>\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={handleClearCompleted}\n    >\n      Clear completed\n    </button>\n  </>\n);\n\nTodoFilter.propTypes = {\n  handleSelect: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n};\n\nexport default TodoFilter;\n","import React, { Component } from 'react';\nimport TodoCreator from './components/TodoCreator/TodoCreator';\nimport TodoList from './components/TodoList/TodoList';\nimport TodoFilter from './components/TodoFilter/TodoFilter';\n\nconst filterTodosWithQuery = (\n  todos, filter,\n) => {\n  if (filter === 'all') {\n    return todos;\n  }\n\n  return todos.filter(todo => todo.completed === filter);\n};\n\nexport default class App extends Component {\n  state = {\n    todos: [],\n    filter: 'all',\n  };\n\n  onHandleFilter = (e) => {\n    const filter = e.target.name;\n\n    switch (filter) {\n      case 'false':\n        this.setState({\n          filter: false,\n        });\n        break;\n      case 'true':\n        this.setState({\n          filter: true,\n        });\n        break;\n      case 'all':\n        this.setState({\n          filter: 'all',\n        });\n        break;\n      default:\n    }\n  }\n\n  countNotCompleted = () => {\n    const { todos } = this.state;\n\n    return todos.filter(todo => !todo.completed).length;\n  }\n\n  onAddTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  onDeleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  onUpdateCompleted = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (todo.id === id ? {\n        ...todo, completed: !todo.completed,\n      } : todo)),\n    }));\n  }\n\n  onClearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  onHandleToggleAll = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })),\n    }));\n  }\n\n  render() {\n    const { filter, todos } = this.state;\n    const filteredTodos = filterTodosWithQuery(todos, filter);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoCreator addTodo={this.onAddTodo} />\n        </header>\n\n        <section className=\"main\">\n          <TodoList\n            todos={filteredTodos}\n            deleteTodo={this.onDeleteTodo}\n            updateCompleted={this.onUpdateCompleted}\n            handleToggleAll={this.onHandleToggleAll}\n          />\n\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${this.countNotCompleted()} items left`}\n          </span>\n          <TodoFilter\n            handleSelect={this.onHandleFilter}\n            handleClearCompleted={this.onClearCompleted}\n          />\n        </footer>\n      </section>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}