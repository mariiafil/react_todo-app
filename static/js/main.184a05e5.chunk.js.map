{"version":3,"sources":["components/TodoCreator/TodoCreator.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoFilter/TodoFilter.js","App.js","index.js"],"names":["uuidv1","require","TodoCreator","state","newTodo","handleChange","e","value","target","setState","handleEnter","key","trim","length","props","addTodo","title","completed","id","this","type","className","placeholder","onChange","onKeyDown","Component","TodoItem","deleteTodo","updateCompleted","checked","htmlFor","onClick","defaultProps","TodoList","todos","handleToggleAll","map","todo","TodoFilter","handleFilter","handleClearCompleted","href","name","App","filter","onHanleFilter","countNotCompleted","onAddTodo","prevState","onDeleteTodo","onUpdateCompleted","onClearCompleted","isAllChecked","every","onHandleToggleAll","persistedTodos","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","filteredTodos","filterTodosWithQuery","handleSelect","onHandleFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.184a05e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst uuidv1 = require('uuid/v1');\n\nexport default class TodoCreator extends Component {\n  state = {\n    newTodo: '',\n  }\n\n  handleChange = (e) => {\n    const { value } = e.target;\n\n    this.setState({\n      newTodo: value,\n    });\n  }\n\n  handleEnter = (e) => {\n    const { newTodo } = this.state;\n\n    if (e.key === 'Enter' && newTodo.trim().length > 0) {\n      this.props.addTodo({\n        title: newTodo,\n        completed: false,\n        id: uuidv1(),\n      });\n      this.setState({\n        newTodo: '',\n      });\n    }\n  }\n\n  render() {\n    const { newTodo } = this.state;\n\n    return (\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodo}\n        onChange={this.handleChange}\n        onKeyDown={this.handleEnter}\n      />\n    );\n  }\n}\n\nTodoCreator.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({\n  title,\n  id,\n  completed,\n  deleteTodo,\n  updateCompleted,\n}) => (\n  <div className=\"view\">\n    <input\n      type=\"checkbox\"\n      className=\"toggle\"\n      id={id}\n      onChange={updateCompleted}\n      checked={completed}\n    />\n    <label\n      htmlFor={id}\n      className={completed === true ? 'checked' : 'todo'}\n    >\n      {title}\n    </label>\n    <button\n      type=\"button\"\n      className=\"destroy\"\n      onClick={deleteTodo}\n    />\n  </div>\n);\n\nTodoItem.defaultProps = {\n  completed: false,\n};\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  updateCompleted: PropTypes.func.isRequired,\n  completed: PropTypes.bool,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\n\nconst TodoList = ({\n  todos,\n  deleteTodo,\n  updateCompleted,\n  handleToggleAll,\n  checked,\n}) => (\n  <>\n    {\n      todos.length > 0 && (\n        <>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={checked}\n            onChange={() => handleToggleAll(checked)}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        </>\n      )\n    }\n    <ul className=\"todo-list\">\n      {\n        todos.map(todo => (\n          <li key={todo.id}>\n            <TodoItem\n              {...todo}\n              deleteTodo={() => deleteTodo(todo.id)}\n              updateCompleted={() => updateCompleted(todo.id)}\n            />\n          </li>\n        ))\n      }\n    </ul>\n  </>\n);\n\nTodoList.defaultProps = {\n  todos: [],\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string,\n      id: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ),\n  checked: PropTypes.bool.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  updateCompleted: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoFilter = ({\n  handleFilter,\n  handleClearCompleted,\n}) => (\n  <>\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className=\"selected\"\n          name=\"all\"\n          onClick={handleFilter}\n        >\n        All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          name=\"active\"\n          onClick={handleFilter}\n        >\n       Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          name=\"completed\"\n          href=\"#/completed\"\n          onClick={handleFilter}\n        >\n       Completed\n        </a>\n      </li>\n    </ul>\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={handleClearCompleted}\n    >\n      Clear completed\n    </button>\n  </>\n);\n\nTodoFilter.propTypes = {\n  handleFilter: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n};\n\nexport default TodoFilter;\n","import React, { Component } from 'react';\nimport TodoCreator from './components/TodoCreator/TodoCreator';\nimport TodoList from './components/TodoList/TodoList';\nimport TodoFilter from './components/TodoFilter/TodoFilter';\n\nconst filterTodosWithQuery = (\n  todos, filter,\n) => {\n  if (filter === 'all') {\n    return todos;\n  }\n\n  if (filter === 'completed') {\n    return todos.filter(todo => todo.completed);\n  }\n\n  return todos.filter(todo => !todo.completed);\n};\n\nexport default class App extends Component {\n  state = {\n    todos: [],\n    filter: 'all',\n  };\n\n  componentDidMount() {\n    const persistedTodos = localStorage.getItem('todos');\n\n    if (persistedTodos) {\n      const todos = JSON.parse(persistedTodos);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  onHanleFilter = (e) => {\n    const { name } = e.target;\n\n    switch (name) {\n      case 'all':\n        this.setState({\n          filter: 'all',\n        });\n        break;\n      case 'completed':\n        this.setState({\n          filter: 'completed',\n        });\n        break;\n      case 'active':\n        this.setState({\n          filter: 'active',\n        });\n        break;\n      default:\n    }\n  }\n\n  countNotCompleted = () => {\n    const { todos } = this.state;\n\n    return todos.filter(todo => !todo.completed).length;\n  }\n\n  onAddTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  onDeleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  onUpdateCompleted = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (todo.id === id\n        ? {\n          ...todo, completed: !todo.completed,\n        } : todo)),\n    }));\n  }\n\n  onClearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  isAllChecked = () => this.state.todos.every(todo => todo.completed);\n\n  onHandleToggleAll = (checked) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: !checked,\n      })),\n    }));\n  }\n\n  render() {\n    const {\n      filter,\n      todos,\n    } = this.state;\n    const filteredTodos = filterTodosWithQuery(todos, filter);\n    const isAllChecked = this.isAllChecked();\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoCreator addTodo={this.onAddTodo} />\n        </header>\n\n        <section className=\"main\">\n          <TodoList\n            todos={filteredTodos}\n            deleteTodo={this.onDeleteTodo}\n            updateCompleted={this.onUpdateCompleted}\n            handleToggleAll={this.onHandleToggleAll}\n            checked={isAllChecked}\n          />\n        </section>\n        {todos.length > 0 && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${this.countNotCompleted()} items left`}\n            </span>\n            <TodoFilter\n              handleFilter={this.onHanleFilter}\n              handleSelect={this.onHandleFilter}\n              handleClearCompleted={this.onClearCompleted}\n            />\n          </footer>\n        )}\n      </section>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}